//Emmett Woytovich

//GLOBALS
String title=  "Project 3";
String author=  "Emmett Woytovich";

float friction = 1.0055;
float left, right, top, bottom, middle;
int balldiam = 30;
int buttonS = 30;
int numC,cx,cN,counter;
boolean w;
boolean rC = false;

Ball [] balls = new Ball[6];

//SETUP
void setup() {
  size( 600, 400 );
  rectMode( CORNERS );
  textAlign(CENTER,CENTER);
  noStroke();
  left=   50;
  right=  width-50;
  top=    100;
  bottom= height-50;
  middle= left + (right-left) / 2;
  reset();
 }
 void reset() {
   balls[0] = new Ball("", 255,255,255);
  
   balls[1] = new Ball("1", 200,0,0);
   balls[2] = new Ball("2", 0,40,255);
   balls[3] = new Ball("3", 100,0,200);
   balls[4] = new Ball("4", 0,200,100);
   balls[5] = new Ball("5", 0,0,100);
   w = true;
   balls[0].x=  left + (right-left) / 4; balls[0].dx = 0;
   balls[0].y=  top + (bottom-top) / 2;  balls[0].dy = 0;
   counter = 0;
   check();
   
 }

void check(){
  //Avoids infinite loop in the case that there are no places to put the ball
  //Testing has shown that 3 is currently the highest number of corrections and happens very infrequently
  if(counter > 1000){ exit(); } 
  for(int i=0; i<balls.length-1;i++){     //check all the balls
     for(int j=i+1; j<balls.length;j++){  //against each other ball
                                          //if balls conflict reset one of the balls, take note, and start over
       if(dist(balls[i].x,balls[i].y, balls[j].x,balls[j].y)< balldiam){ 
          balls[i].resetC();
          counter++;
          check();
        }
//eventually this if statement will not be true, in that case no balls are overlapping
     }    
  }
}

void draw() {
  background( 250,250,200 );  
  table( left, top, right, bottom );
  buttons();
  pointer();
  scene();
  for(int i=0; i<balls.length;i++){
    balls[i].show();
    balls[i].move();
  }
  cloud();
  collisions();
  show();
  messages();
  

}


void table( float left, float top, float right, float bottom ) {
  fill( 100, 250, 100 );    // green pool table
  strokeWeight(10);
  stroke( 127, 0, 0 );      // Brown walls
  rect( left-20, top-20, right+20, bottom+20 );
  
  if(w){
  strokeWeight(20);
  fill(100,100,0);
  line( middle,top+10, middle,bottom-10 );
  }

  noStroke();
}


void collisions() {
  
  float temp;
  for(int i=0; i<balls.length-1;i++){
     for(int j=i+1; j<balls.length;j++){
       
       if(balls[i].hit(balls[j].x,balls[j].y)){ 
          temp = balls[i].dx; balls[i].dx = balls[j].dx; balls[j].dx = temp;
          temp = balls[i].dy; balls[i].dy = balls[j].dy; balls[j].dy = temp;
          
        }
     }    
  }
    
}


void messages() {
  fill(0);
  text( title, width/2, 20 );
  text( "Ball spawn corrections made: "+counter, width/2, 35);
  text( author, 10, height-10 );
}


void pointer(){
 
  fill(0);
  stroke(1);
  strokeWeight(1);  
  line(balls[0].x,balls[0].y,mouseX,mouseY);
  noStroke();  
  
}

void scene(){
  //grass
  int loop = width/10;
  while( loop < width){
    grass(loop,height);
    loop += width/10;
  }
    //clouds
  /*
  for(int c=0-width/numC; c<width; c+= width/numC){
    cloud(c+cx, 50);
  }
  cx++;
  if(cx>width+25){cx=0; numC=int(random(1,7));}
  */
}
void grass(float x,float y){
  stroke(0,250,0); strokeWeight(7);
  line(x,y, x,y-15);
  line(x,y, x-10,y-10);
  line(x,y, x+10,y-10);
  noStroke();
}

void cloud(){
  if(!rC){
    cx = 0;
    numC = int(random(1,7));
    rC = true;
  }
  fill(255);
  for(int c = 0; c < numC; c++){
    ellipse(cx - (c*75),50, 50,25);
  }
  cx++;
  if(cx-((numC-1)*75)-(100*numC) > width){rC = false;}
}
void buttons() {
    fill(200,0,0);   rect(10,33, 10 + buttonS,33 + buttonS);
    fill(0,200,0);   rect(50,33, 50 + buttonS,33 + buttonS);
    fill(0,0,200);   rect(width - 10 - buttonS,33, width - 10,33 + buttonS);
    fill(100,0,200); rect(width - 50 - buttonS,33, width - 50,33 + buttonS);
}


void mousePressed(){
  boolean none = true;
  for(int i=1; i<balls.length;i++){
    if(balls[i].hit(mouseX,mouseY)){balls[i].resetC(); none=false;}
   
    
  }
  
  ///////////////
  if(mouseY > 33 && mouseY < 33 + buttonS){
    if(mouseX > 10 && mouseX < 10 + buttonS) { reset(); none=false;}

    if(mouseX > 50 && mouseX < 50 + buttonS + buttonS) {w= false; none=false;}
      
    if(mouseX > width - 10 - buttonS && mouseX < width - 10) {
      none=false;
      //BIRD
    }
  
    if(mouseX > width - 50 - buttonS && mouseX < width - 50) { 
      none=false;
      //RAT
    }
  }
  if(none){ 
      balls[0].dx += (balls[0].x - mouseX)/50/balls.length;
      balls[0].dy += (balls[0].y - mouseY)/50/balls.length;
    }
  
    
    
}

void keyPressed() {
  if (key == 'r') {
    setup();
  }
  else if(key == 'b'){
    check();
  }
}

class Ball {
  
  float x,y, dx,dy;
  int r,g,b;
  String name;
  
  //CONSTRUCTORS
 
  Ball( String sIn, int rIn, int gIn, int bIn ) { 
    name=  sIn;  
    r=  rIn;  
    g=  gIn;  
    b=  bIn;  
    resetC();
  }
  //METHODS
  void show() {
    fill(r,g,b);
    ellipse( x,y, 30,30 );
    fill(255);
    text( name, x,y );
  }
  void move() {
    if (x>=right)     {dx= -dx; x = right;}
    if (x<=left)      {dx= -dx; x = left;}
    if (y>=bottom)    {dy= -dy; y = bottom;}
    if (y<=top)       {dy= -dy; y = top;}
    if (w && x >= middle && x<= middle+10+(balldiam/2)){dx = -dx; x = middle+10+(balldiam/2);}
    if (w && x < middle && x>= middle-10-(balldiam/2)){dx = -dx; x = middle-10-(balldiam/2);}
    x += dx; dx /= friction; 
    y += dy; dy /= friction;
  }
  void resetC() {
    x=  random( middle +25,right );
    y=  random( top, bottom );
    dx= 0; //random( 0,5 );
    dy= 0; //random( -5,5 );
  }
  boolean hit( float xOther, float yOther ) {
    if (  dist( xOther,yOther, x,y ) <= balldiam ) return true;
    else return false;
  }
}

